{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6aa10f5d",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-28T16:38:22.645665Z",
     "iopub.status.busy": "2024-05-28T16:38:22.645197Z",
     "iopub.status.idle": "2024-05-28T16:38:23.681211Z",
     "shell.execute_reply": "2024-05-28T16:38:23.679668Z"
    },
    "papermill": {
     "duration": 1.047563,
     "end_time": "2024-05-28T16:38:23.684025",
     "exception": false,
     "start_time": "2024-05-28T16:38:22.636462",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/cells-of-sickle/sickle-cell-image.jpg\n",
      "/kaggle/input/cells-of-sickle/650x450-Sickle-Cell-Trait.jpg\n",
      "/kaggle/input/cells-of-sickle/120320_bb_sickle-cell_feat.jpg\n",
      "/kaggle/input/cells-of-sickle/Sickle Cell Anemia smear 40x.jpg\n",
      "/kaggle/input/thalassemia-cells/0506HbHSmear1-Gloria-Kwon.jpg\n",
      "/kaggle/input/thalassemia-cells/pathology_thalassemiaminor40x03.jpg\n",
      "/kaggle/input/thalassemia-cells/thal1.webp\n",
      "/kaggle/input/thalassemia-cells/170218444-target-cells-with-abnormal-red-blood-cells-in-blood-smear-specimen-from-thalassemia-patient.jpg\n",
      "/kaggle/input/model-pkl/ML HT6 Model 1.pkl\n",
      "/kaggle/input/011pdk/ML HT6 Model 011 perc.pkl\n",
      "/kaggle/input/healthy-cells/soidfj.jpg\n",
      "/kaggle/input/healthy-cells/download.jpeg\n",
      "/kaggle/input/healthy-cells/istockphoto-1376243518-612x612.jpg\n",
      "/kaggle/input/healthy-cells/normalbloodsmear.jpg\n",
      "/kaggle/input/leukemia-cells/cml-under-microscope-5b85803346e0fb005093fb84 (1).jpg\n",
      "/kaggle/input/leukemia-cells/allbloodsmear.jpg\n",
      "/kaggle/input/leukemia-cells/1000_F_501580795_cZ0msMXuWFC3dOEejOI2IIe2h30IgU0D.jpg\n",
      "/kaggle/input/leukemia-cells/cml-under-microscope-5b85803346e0fb005093fb84.jpg\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "527342d1",
   "metadata": {
    "papermill": {
     "duration": 0.006019,
     "end_time": "2024-05-28T16:38:23.696892",
     "exception": false,
     "start_time": "2024-05-28T16:38:23.690873",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "604a259e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T16:38:23.712267Z",
     "iopub.status.busy": "2024-05-28T16:38:23.711735Z",
     "iopub.status.idle": "2024-05-28T16:38:23.717132Z",
     "shell.execute_reply": "2024-05-28T16:38:23.715941Z"
    },
    "papermill": {
     "duration": 0.016606,
     "end_time": "2024-05-28T16:38:23.719868",
     "exception": false,
     "start_time": "2024-05-28T16:38:23.703262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#|default_exp app"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "32b24149",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T16:38:23.735446Z",
     "iopub.status.busy": "2024-05-28T16:38:23.734410Z",
     "iopub.status.idle": "2024-05-28T16:38:41.802966Z",
     "shell.execute_reply": "2024-05-28T16:38:41.801317Z"
    },
    "papermill": {
     "duration": 18.079513,
     "end_time": "2024-05-28T16:38:41.805949",
     "exception": false,
     "start_time": "2024-05-28T16:38:23.726436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "!pip install -Uqq fastai"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b8977bb1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T16:38:41.821201Z",
     "iopub.status.busy": "2024-05-28T16:38:41.820751Z",
     "iopub.status.idle": "2024-05-28T16:39:06.839811Z",
     "shell.execute_reply": "2024-05-28T16:39:06.838268Z"
    },
    "papermill": {
     "duration": 25.030165,
     "end_time": "2024-05-28T16:39:06.842781",
     "exception": false,
     "start_time": "2024-05-28T16:38:41.812616",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting gradio\r\n",
      "  Downloading gradio-4.31.5-py3-none-any.whl.metadata (15 kB)\r\n",
      "Requirement already satisfied: aiofiles<24.0,>=22.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (22.1.0)\r\n",
      "Requirement already satisfied: altair<6.0,>=4.2.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (5.3.0)\r\n",
      "Requirement already satisfied: fastapi in /opt/conda/lib/python3.10/site-packages (from gradio) (0.108.0)\r\n",
      "Collecting ffmpy (from gradio)\r\n",
      "  Downloading ffmpy-0.3.2.tar.gz (5.5 kB)\r\n",
      "  Preparing metadata (setup.py) ... \u001b[?25l-\b \bdone\r\n",
      "\u001b[?25hCollecting gradio-client==0.16.4 (from gradio)\r\n",
      "  Downloading gradio_client-0.16.4-py3-none-any.whl.metadata (7.1 kB)\r\n",
      "Requirement already satisfied: httpx>=0.24.1 in /opt/conda/lib/python3.10/site-packages (from gradio) (0.27.0)\r\n",
      "Requirement already satisfied: huggingface-hub>=0.19.3 in /opt/conda/lib/python3.10/site-packages (from gradio) (0.22.2)\r\n",
      "Requirement already satisfied: importlib-resources<7.0,>=1.3 in /opt/conda/lib/python3.10/site-packages (from gradio) (6.1.1)\r\n",
      "Requirement already satisfied: jinja2<4.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (3.1.2)\r\n",
      "Requirement already satisfied: markupsafe~=2.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (2.1.3)\r\n",
      "Requirement already satisfied: matplotlib~=3.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (3.7.5)\r\n",
      "Requirement already satisfied: numpy~=1.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (1.26.4)\r\n",
      "Requirement already satisfied: orjson~=3.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (3.9.10)\r\n",
      "Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from gradio) (21.3)\r\n",
      "Requirement already satisfied: pandas<3.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (2.2.1)\r\n",
      "Requirement already satisfied: pillow<11.0,>=8.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (9.5.0)\r\n",
      "Requirement already satisfied: pydantic>=2.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (2.5.3)\r\n",
      "Requirement already satisfied: pydub in /opt/conda/lib/python3.10/site-packages (from gradio) (0.25.1)\r\n",
      "Collecting python-multipart>=0.0.9 (from gradio)\r\n",
      "  Downloading python_multipart-0.0.9-py3-none-any.whl.metadata (2.5 kB)\r\n",
      "Requirement already satisfied: pyyaml<7.0,>=5.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (6.0.1)\r\n",
      "Collecting ruff>=0.2.2 (from gradio)\r\n",
      "  Downloading ruff-0.4.5-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (24 kB)\r\n",
      "Collecting semantic-version~=2.0 (from gradio)\r\n",
      "  Downloading semantic_version-2.10.0-py2.py3-none-any.whl.metadata (9.7 kB)\r\n",
      "Collecting tomlkit==0.12.0 (from gradio)\r\n",
      "  Downloading tomlkit-0.12.0-py3-none-any.whl.metadata (2.7 kB)\r\n",
      "Collecting typer<1.0,>=0.12 (from gradio)\r\n",
      "  Downloading typer-0.12.3-py3-none-any.whl.metadata (15 kB)\r\n",
      "Requirement already satisfied: typing-extensions~=4.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (4.9.0)\r\n",
      "Collecting urllib3~=2.0 (from gradio)\r\n",
      "  Downloading urllib3-2.2.1-py3-none-any.whl.metadata (6.4 kB)\r\n",
      "Requirement already satisfied: uvicorn>=0.14.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (0.25.0)\r\n",
      "Requirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from gradio-client==0.16.4->gradio) (2024.2.0)\r\n",
      "Collecting websockets<12.0,>=10.0 (from gradio-client==0.16.4->gradio)\r\n",
      "  Downloading websockets-11.0.3-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.6 kB)\r\n",
      "Requirement already satisfied: jsonschema>=3.0 in /opt/conda/lib/python3.10/site-packages (from altair<6.0,>=4.2.0->gradio) (4.20.0)\r\n",
      "Requirement already satisfied: toolz in /opt/conda/lib/python3.10/site-packages (from altair<6.0,>=4.2.0->gradio) (0.12.1)\r\n",
      "Requirement already satisfied: anyio in /opt/conda/lib/python3.10/site-packages (from httpx>=0.24.1->gradio) (4.2.0)\r\n",
      "Requirement already satisfied: certifi in /opt/conda/lib/python3.10/site-packages (from httpx>=0.24.1->gradio) (2024.2.2)\r\n",
      "Requirement already satisfied: httpcore==1.* in /opt/conda/lib/python3.10/site-packages (from httpx>=0.24.1->gradio) (1.0.5)\r\n",
      "Requirement already satisfied: idna in /opt/conda/lib/python3.10/site-packages (from httpx>=0.24.1->gradio) (3.6)\r\n",
      "Requirement already satisfied: sniffio in /opt/conda/lib/python3.10/site-packages (from httpx>=0.24.1->gradio) (1.3.0)\r\n",
      "Requirement already satisfied: h11<0.15,>=0.13 in /opt/conda/lib/python3.10/site-packages (from httpcore==1.*->httpx>=0.24.1->gradio) (0.14.0)\r\n",
      "Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.3->gradio) (3.13.1)\r\n",
      "Requirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.3->gradio) (2.31.0)\r\n",
      "Requirement already satisfied: tqdm>=4.42.1 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.3->gradio) (4.66.1)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib~=3.0->gradio) (1.2.0)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib~=3.0->gradio) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib~=3.0->gradio) (4.47.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib~=3.0->gradio) (1.4.5)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib~=3.0->gradio) (3.1.1)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib~=3.0->gradio) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas<3.0,>=1.0->gradio) (2023.3.post1)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas<3.0,>=1.0->gradio) (2023.4)\r\n",
      "Requirement already satisfied: annotated-types>=0.4.0 in /opt/conda/lib/python3.10/site-packages (from pydantic>=2.0->gradio) (0.6.0)\r\n",
      "Requirement already satisfied: pydantic-core==2.14.6 in /opt/conda/lib/python3.10/site-packages (from pydantic>=2.0->gradio) (2.14.6)\r\n",
      "Requirement already satisfied: click>=8.0.0 in /opt/conda/lib/python3.10/site-packages (from typer<1.0,>=0.12->gradio) (8.1.7)\r\n",
      "Collecting shellingham>=1.3.0 (from typer<1.0,>=0.12->gradio)\r\n",
      "  Downloading shellingham-1.5.4-py2.py3-none-any.whl.metadata (3.5 kB)\r\n",
      "Requirement already satisfied: rich>=10.11.0 in /opt/conda/lib/python3.10/site-packages (from typer<1.0,>=0.12->gradio) (13.7.0)\r\n",
      "Requirement already satisfied: starlette<0.33.0,>=0.29.0 in /opt/conda/lib/python3.10/site-packages (from fastapi->gradio) (0.32.0.post1)\r\n",
      "Requirement already satisfied: attrs>=22.2.0 in /opt/conda/lib/python3.10/site-packages (from jsonschema>=3.0->altair<6.0,>=4.2.0->gradio) (23.2.0)\r\n",
      "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /opt/conda/lib/python3.10/site-packages (from jsonschema>=3.0->altair<6.0,>=4.2.0->gradio) (2023.12.1)\r\n",
      "Requirement already satisfied: referencing>=0.28.4 in /opt/conda/lib/python3.10/site-packages (from jsonschema>=3.0->altair<6.0,>=4.2.0->gradio) (0.32.1)\r\n",
      "Requirement already satisfied: rpds-py>=0.7.1 in /opt/conda/lib/python3.10/site-packages (from jsonschema>=3.0->altair<6.0,>=4.2.0->gradio) (0.16.2)\r\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib~=3.0->gradio) (1.16.0)\r\n",
      "Requirement already satisfied: markdown-it-py>=2.2.0 in /opt/conda/lib/python3.10/site-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (3.0.0)\r\n",
      "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /opt/conda/lib/python3.10/site-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (2.17.2)\r\n",
      "Requirement already satisfied: exceptiongroup>=1.0.2 in /opt/conda/lib/python3.10/site-packages (from anyio->httpx>=0.24.1->gradio) (1.2.0)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub>=0.19.3->gradio) (3.3.2)\r\n",
      "Requirement already satisfied: mdurl~=0.1 in /opt/conda/lib/python3.10/site-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->typer<1.0,>=0.12->gradio) (0.1.2)\r\n",
      "Downloading gradio-4.31.5-py3-none-any.whl (12.3 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.3/12.3 MB\u001b[0m \u001b[31m63.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading gradio_client-0.16.4-py3-none-any.whl (315 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m315.9/315.9 kB\u001b[0m \u001b[31m15.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading tomlkit-0.12.0-py3-none-any.whl (37 kB)\r\n",
      "Downloading python_multipart-0.0.9-py3-none-any.whl (22 kB)\r\n",
      "Downloading ruff-0.4.5-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (8.8 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.8/8.8 MB\u001b[0m \u001b[31m76.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading semantic_version-2.10.0-py2.py3-none-any.whl (15 kB)\r\n",
      "Downloading typer-0.12.3-py3-none-any.whl (47 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m47.2/47.2 kB\u001b[0m \u001b[31m2.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading urllib3-2.2.1-py3-none-any.whl (121 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m121.1/121.1 kB\u001b[0m \u001b[31m6.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading shellingham-1.5.4-py2.py3-none-any.whl (9.8 kB)\r\n",
      "Downloading websockets-11.0.3-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (129 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m129.9/129.9 kB\u001b[0m \u001b[31m6.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hBuilding wheels for collected packages: ffmpy\r\n",
      "  Building wheel for ffmpy (setup.py) ... \u001b[?25l-\b \b\\\b \bdone\r\n",
      "\u001b[?25h  Created wheel for ffmpy: filename=ffmpy-0.3.2-py3-none-any.whl size=5584 sha256=8d48a3ecf40fbe924f8709957d9b875fb266cc3dca9fa855ee0b4a06aa7c2ec1\r\n",
      "  Stored in directory: /root/.cache/pip/wheels/bd/65/9a/671fc6dcde07d4418df0c592f8df512b26d7a0029c2a23dd81\r\n",
      "Successfully built ffmpy\r\n",
      "Installing collected packages: ffmpy, websockets, urllib3, tomlkit, shellingham, semantic-version, ruff, python-multipart, typer, gradio-client, gradio\r\n",
      "  Attempting uninstall: websockets\r\n",
      "    Found existing installation: websockets 12.0\r\n",
      "    Uninstalling websockets-12.0:\r\n",
      "      Successfully uninstalled websockets-12.0\r\n",
      "  Attempting uninstall: urllib3\r\n",
      "    Found existing installation: urllib3 1.26.18\r\n",
      "    Uninstalling urllib3-1.26.18:\r\n",
      "      Successfully uninstalled urllib3-1.26.18\r\n",
      "  Attempting uninstall: tomlkit\r\n",
      "    Found existing installation: tomlkit 0.12.4\r\n",
      "    Uninstalling tomlkit-0.12.4:\r\n",
      "      Successfully uninstalled tomlkit-0.12.4\r\n",
      "  Attempting uninstall: typer\r\n",
      "    Found existing installation: typer 0.9.0\r\n",
      "    Uninstalling typer-0.9.0:\r\n",
      "      Successfully uninstalled typer-0.9.0\r\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "tensorflow-decision-forests 1.8.1 requires wurlitzer, which is not installed.\r\n",
      "botocore 1.34.51 requires urllib3<2.1,>=1.25.4; python_version >= \"3.10\", but you have urllib3 2.2.1 which is incompatible.\r\n",
      "kfp 2.5.0 requires google-cloud-storage<3,>=2.2.1, but you have google-cloud-storage 1.44.0 which is incompatible.\r\n",
      "kfp 2.5.0 requires urllib3<2.0.0, but you have urllib3 2.2.1 which is incompatible.\r\n",
      "spacy 3.7.4 requires typer<0.10.0,>=0.3.0, but you have typer 0.12.3 which is incompatible.\r\n",
      "tensorflow 2.15.0 requires keras<2.16,>=2.15.0, but you have keras 3.1.1 which is incompatible.\r\n",
      "weasel 0.3.4 requires typer<0.10.0,>=0.3.0, but you have typer 0.12.3 which is incompatible.\r\n",
      "ydata-profiling 4.6.4 requires numpy<1.26,>=1.16.0, but you have numpy 1.26.4 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mSuccessfully installed ffmpy-0.3.2 gradio-4.31.5 gradio-client-0.16.4 python-multipart-0.0.9 ruff-0.4.5 semantic-version-2.10.0 shellingham-1.5.4 tomlkit-0.12.0 typer-0.12.3 urllib3-2.1.0 websockets-11.0.3\r\n"
     ]
    }
   ],
   "source": [
    "!pip install gradio\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "02f8c016",
   "metadata": {
    "papermill": {
     "duration": 0.012062,
     "end_time": "2024-05-28T16:39:06.867768",
     "exception": false,
     "start_time": "2024-05-28T16:39:06.855706",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cdb4d31d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T16:39:06.894539Z",
     "iopub.status.busy": "2024-05-28T16:39:06.894074Z",
     "iopub.status.idle": "2024-05-28T16:39:11.454712Z",
     "shell.execute_reply": "2024-05-28T16:39:11.453551Z"
    },
    "papermill": {
     "duration": 4.577488,
     "end_time": "2024-05-28T16:39:11.457640",
     "exception": false,
     "start_time": "2024-05-28T16:39:06.880152",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import gradio as gr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "018315b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T16:39:11.485504Z",
     "iopub.status.busy": "2024-05-28T16:39:11.484333Z",
     "iopub.status.idle": "2024-05-28T16:39:23.090130Z",
     "shell.execute_reply": "2024-05-28T16:39:23.088708Z"
    },
    "papermill": {
     "duration": 11.622569,
     "end_time": "2024-05-28T16:39:23.092975",
     "exception": false,
     "start_time": "2024-05-28T16:39:11.470406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from fastai.vision.all import*\n",
    "\n",
    "def is_healthy(x): return x[0].isupper()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0da44e8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T16:39:23.120770Z",
     "iopub.status.busy": "2024-05-28T16:39:23.120303Z",
     "iopub.status.idle": "2024-05-28T16:39:23.163885Z",
     "shell.execute_reply": "2024-05-28T16:39:23.162559Z"
    },
    "papermill": {
     "duration": 0.060022,
     "end_time": "2024-05-28T16:39:23.166776",
     "exception": false,
     "start_time": "2024-05-28T16:39:23.106754",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "PILImage mode=RGB size=192x128"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "im = PILImage.create('/kaggle/input/healthy-cells/istockphoto-1376243518-612x612.jpg')\n",
    "im.thumbnail((192,192))\n",
    "im"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a1830920",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T16:39:23.195906Z",
     "iopub.status.busy": "2024-05-28T16:39:23.194849Z",
     "iopub.status.idle": "2024-05-28T16:39:23.800366Z",
     "shell.execute_reply": "2024-05-28T16:39:23.799012Z"
    },
    "papermill": {
     "duration": 0.622885,
     "end_time": "2024-05-28T16:39:23.803132",
     "exception": false,
     "start_time": "2024-05-28T16:39:23.180247",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "learn = load_learner('/kaggle/input/011pdk/ML HT6 Model 011 perc.pkl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "720717de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T16:39:23.832373Z",
     "iopub.status.busy": "2024-05-28T16:39:23.831258Z",
     "iopub.status.idle": "2024-05-28T16:39:24.142501Z",
     "shell.execute_reply": "2024-05-28T16:39:24.141272Z"
    },
    "papermill": {
     "duration": 0.32866,
     "end_time": "2024-05-28T16:39:24.145205",
     "exception": false,
     "start_time": "2024-05-28T16:39:23.816545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<style>\n",
       "    /* Turns off some styling */\n",
       "    progress {\n",
       "        /* gets rid of default border in Firefox and Opera. */\n",
       "        border: none;\n",
       "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
       "        background-size: auto;\n",
       "    }\n",
       "    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n",
       "        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n",
       "    }\n",
       "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
       "        background: #F44336;\n",
       "    }\n",
       "</style>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "('healthy blood cells microscope',\n",
       " tensor(0),\n",
       " tensor([0.5058, 0.0522, 0.1066, 0.3353]))"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "learn.predict(im)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "165f503b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T16:39:24.175466Z",
     "iopub.status.busy": "2024-05-28T16:39:24.175060Z",
     "iopub.status.idle": "2024-05-28T16:39:24.181822Z",
     "shell.execute_reply": "2024-05-28T16:39:24.180572Z"
    },
    "papermill": {
     "duration": 0.025478,
     "end_time": "2024-05-28T16:39:24.184675",
     "exception": false,
     "start_time": "2024-05-28T16:39:24.159197",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "categories = ('Healthy Cell', 'Leukemia', 'Sickle Cell', 'Thalassemia')\n",
    "def classify_image(img):\n",
    "    pred,idx,probs = learn.predict(img)\n",
    "    return dict(zip(categories, map(float,probs)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c5aadc8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T16:39:24.215416Z",
     "iopub.status.busy": "2024-05-28T16:39:24.214995Z",
     "iopub.status.idle": "2024-05-28T16:39:24.293585Z",
     "shell.execute_reply": "2024-05-28T16:39:24.292414Z"
    },
    "papermill": {
     "duration": 0.097059,
     "end_time": "2024-05-28T16:39:24.296393",
     "exception": false,
     "start_time": "2024-05-28T16:39:24.199334",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<style>\n",
       "    /* Turns off some styling */\n",
       "    progress {\n",
       "        /* gets rid of default border in Firefox and Opera. */\n",
       "        border: none;\n",
       "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
       "        background-size: auto;\n",
       "    }\n",
       "    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n",
       "        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n",
       "    }\n",
       "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
       "        background: #F44336;\n",
       "    }\n",
       "</style>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "{'Healthy Cell': 0.5057879686355591,\n",
       " 'Leukemia': 0.052249323576688766,\n",
       " 'Sickle Cell': 0.10661672055721283,\n",
       " 'Thalassemia': 0.33534592390060425}"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classify_image(im)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cb657013",
   "metadata": {
    "papermill": {
     "duration": 0.014508,
     "end_time": "2024-05-28T16:39:24.325622",
     "exception": false,
     "start_time": "2024-05-28T16:39:24.311114",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f327091c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T16:39:24.356466Z",
     "iopub.status.busy": "2024-05-28T16:39:24.356023Z",
     "iopub.status.idle": "2024-05-28T16:39:24.361465Z",
     "shell.execute_reply": "2024-05-28T16:39:24.360270Z"
    },
    "papermill": {
     "duration": 0.023904,
     "end_time": "2024-05-28T16:39:24.363951",
     "exception": false,
     "start_time": "2024-05-28T16:39:24.340047",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import gradio as gr\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fcdb1a69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T16:39:24.394514Z",
     "iopub.status.busy": "2024-05-28T16:39:24.394040Z",
     "iopub.status.idle": "2024-05-28T16:39:28.836680Z",
     "shell.execute_reply": "2024-05-28T16:39:28.835525Z"
    },
    "papermill": {
     "duration": 4.461352,
     "end_time": "2024-05-28T16:39:28.839655",
     "exception": false,
     "start_time": "2024-05-28T16:39:24.378303",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/gradio/interface.py:382: UserWarning: The `allow_flagging` parameter in `Interface` nowtakes a string value ('auto', 'manual', or 'never'), not a boolean. Setting parameter to: 'never'.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running on local URL:  http://127.0.0.1:7860\n",
      "Kaggle notebooks require sharing enabled. Setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n",
      "\n",
      "Running on public URL: https://88f99296604bd2deb1.gradio.live\n",
      "\n",
      "This share link expires in 72 hours. For free permanent hosting and GPU upgrades, run `gradio deploy` from Terminal to deploy to Spaces (https://huggingface.co/spaces)\n"
     ]
    },
    {
     "data": {
      "text/plain": []
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import gradio as gr\n",
    "\n",
    "# Assuming no shape needs to be specified directly in the constructor\n",
    "image = gr.Image()\n",
    "label = gr.Label()\n",
    "examples = [\n",
    "    '/kaggle/input/leukemia-cells/allbloodsmear.jpg', \n",
    "    '/kaggle/input/cells-of-sickle/650x450-Sickle-Cell-Trait.jpg',\n",
    "    '/kaggle/input/cells-of-sickle/Sickle Cell Anemia smear 40x.jpg',\n",
    "    '/kaggle/input/healthy-cells/normalbloodsmear.jpg'\n",
    "]\n",
    "\n",
    "intf = gr.Interface(\n",
    "    fn=classify_image, \n",
    "    inputs=image, \n",
    "    outputs=label, \n",
    "    examples=examples, \n",
    "    title='Blood Disease Identifier', \n",
    "    description=\"Please upload your blood smear image that is greater than 200x magnification to diagnose the patient with the following blood diseases: Sickle Cell Disease, Leukemia, or Thalassemia. <br><br>Please note that the results are not 100% accurate and should only be used as a first means of detection. Please contact a medical professional for more information and possible future action. CellXpert are not liable for any misdiagnosis that may occur.\", \n",
    "    allow_flagging=False, \n",
    "    article='Sickle cell disease (SCD) is a group of inherited red blood cell disorders. In SCD, the red blood cells become hard and sticky and look like a C-shaped farm tool called a “sickle.” The disease can be managed under proper medical supervision.'\n",
    ")\n",
    "\n",
    "# Launch the interface\n",
    "intf.launch(inline=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e416e0c",
   "metadata": {
    "papermill": {
     "duration": 0.015706,
     "end_time": "2024-05-28T16:39:28.870795",
     "exception": false,
     "start_time": "2024-05-28T16:39:28.855089",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 3643044,
     "sourceId": 6329397,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 3643048,
     "sourceId": 6329402,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 3643055,
     "sourceId": 6329413,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 3643057,
     "sourceId": 6329415,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 3643074,
     "sourceId": 6329441,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 3643364,
     "sourceId": 6329895,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30684,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 72.082999,
   "end_time": "2024-05-28T16:39:31.507984",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-28T16:38:19.424985",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
